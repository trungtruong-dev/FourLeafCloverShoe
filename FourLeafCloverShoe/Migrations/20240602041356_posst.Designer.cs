// <auto-generated />
using System;
using FourLeafCloverShoe.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FourLeafCloverShoe.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20240602041356_posst")]
    partial class posst
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DistrictID")
                        .HasColumnType("int");

                    b.Property<string>("DistrictName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int?>("ProvinceID")
                        .HasColumnType("int");

                    b.Property<string>("ProvinceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("WardCode")
                        .HasColumnType("int");

                    b.Property<string>("WardName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = new Guid("41fe3b03-c103-44ed-88a9-d31ba453dfd6"),
                            Name = "Nike"
                        },
                        new
                        {
                            Id = new Guid("ed1dcf71-20fe-43a0-bb0b-e401c119519a"),
                            Name = "Adidas"
                        },
                        new
                        {
                            Id = new Guid("3b32eb8c-c651-4674-97bf-aa613f36a66e"),
                            Name = "Biti's"
                        },
                        new
                        {
                            Id = new Guid("861e61dc-b90f-4bd6-bfd8-0c8788a40c34"),
                            Name = "Ananas"
                        },
                        new
                        {
                            Id = new Guid("67fac991-8738-40f0-87ea-c61e718a38e1"),
                            Name = "Vascara"
                        },
                        new
                        {
                            Id = new Guid("ccb93843-5c68-47d2-bd06-e0edbab835d4"),
                            Name = "Juno"
                        },
                        new
                        {
                            Id = new Guid("1ab74dac-9370-42bb-a28a-ce242cd7ab19"),
                            Name = "Thượng Đình"
                        },
                        new
                        {
                            Id = new Guid("74e24256-04a1-4ffa-8b07-5eab4be65ca7"),
                            Name = "Laforce"
                        },
                        new
                        {
                            Id = new Guid("3896300d-183a-43fe-909b-d5249374d35a"),
                            Name = "MWC"
                        },
                        new
                        {
                            Id = new Guid("7e0e4606-d687-4d30-a294-f6b2542fd441"),
                            Name = "Đông Hải"
                        });
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductDetailId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("621bc616-5477-4195-a152-b73a46e50055"),
                            Name = "Sneakers"
                        },
                        new
                        {
                            Id = new Guid("175e21d3-f30a-495b-83ca-1c000a528eba"),
                            Name = "Giày cao gót"
                        },
                        new
                        {
                            Id = new Guid("5b394e24-55d3-47d1-8a81-c76f9a43be46"),
                            Name = "Giày sandal"
                        },
                        new
                        {
                            Id = new Guid("24e08766-b0a0-43a0-810f-c790843c2806"),
                            Name = "Dép"
                        },
                        new
                        {
                            Id = new Guid("0e0c4da8-c147-4752-9e3b-694de1e68130"),
                            Name = "Giày thể thao"
                        },
                        new
                        {
                            Id = new Guid("69a5d1c6-da96-425d-9ce1-8bf42bad14ab"),
                            Name = "Giày lười"
                        },
                        new
                        {
                            Id = new Guid("d63fbc47-c0de-4eaf-a411-6054ed936101"),
                            Name = "Giày boot"
                        },
                        new
                        {
                            Id = new Guid("9b454b3d-2063-4ec1-a816-72b2ed3683f0"),
                            Name = "Giày da"
                        });
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Colors", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColorName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5d22b18f-0252-4f15-873d-69bd4a3839bc"),
                            ColorCode = "#FF0000",
                            ColorName = "Đỏ"
                        },
                        new
                        {
                            Id = new Guid("da63e901-f9cc-4919-bafd-2d2804c4fdb6"),
                            ColorCode = "#FFA500",
                            ColorName = "Cam"
                        },
                        new
                        {
                            Id = new Guid("ff767e8e-71c3-497b-a7d8-6f978cb47d57"),
                            ColorCode = "#FFFF00",
                            ColorName = "Vàng"
                        },
                        new
                        {
                            Id = new Guid("81bbe782-34ad-4bda-8547-7810d5ce52dd"),
                            ColorCode = "#008000",
                            ColorName = "Lục"
                        },
                        new
                        {
                            Id = new Guid("d8e06285-c1b3-44d1-a942-024660f95cfe"),
                            ColorCode = "#0000FF",
                            ColorName = "Lam"
                        },
                        new
                        {
                            Id = new Guid("fffa3028-6341-4db6-bfe1-040989c98206"),
                            ColorCode = "#4B0082",
                            ColorName = "Chàm"
                        },
                        new
                        {
                            Id = new Guid("59d8886b-1b5f-4495-a688-50ef7270357a"),
                            ColorCode = "#800080",
                            ColorName = "Tím"
                        },
                        new
                        {
                            Id = new Guid("ca2026ed-fbd2-42df-ac7c-529e3b4e46a8"),
                            ColorCode = "#FFC0CB",
                            ColorName = "Hồng"
                        },
                        new
                        {
                            Id = new Guid("7cfb2f5e-aba3-42c4-b3d6-c401be31c8c6"),
                            ColorCode = "#A52A2A",
                            ColorName = "Nâu"
                        },
                        new
                        {
                            Id = new Guid("f1b56ca8-c850-4a7b-98b3-6374583d66f0"),
                            ColorCode = "#808080",
                            ColorName = "Xám"
                        },
                        new
                        {
                            Id = new Guid("f6b9dfe3-13a1-4c94-917a-b771463b30b5"),
                            ColorCode = "#000000",
                            ColorName = "Đen"
                        },
                        new
                        {
                            Id = new Guid("ff892448-f8e0-442f-9ac5-789250e48898"),
                            ColorCode = "#FFFFFF",
                            ColorName = "Trắng"
                        },
                        new
                        {
                            Id = new Guid("46d0ba6f-49d2-4889-9d15-bbe8a1a47508"),
                            ColorCode = "#40E0D0",
                            ColorName = "Ngọc lam"
                        },
                        new
                        {
                            Id = new Guid("2beb15f0-fcba-49dd-87a9-06e3ca9b5a47"),
                            ColorCode = "#FFDAB9",
                            ColorName = "Hồng đào"
                        },
                        new
                        {
                            Id = new Guid("7c0d2180-d34d-40c3-aa40-463468cf918f"),
                            ColorCode = "#E6E6FA",
                            ColorName = "Tím hoa cà"
                        });
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Material", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("materials");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("CoinsUsed")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ShippingFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("StaffId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalAmout")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("VoucherValue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ProductDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductDetailId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.PaymentDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdOrder")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdPayment")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalMoney")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("IdOrder");

                    b.HasIndex("IdPayment");

                    b.ToTable("PaymentDetails");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.PaymentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3c711591-ebb1-4bee-b647-b1106729b923"),
                            Name = "cod",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("1580acb7-9aa2-425a-abe7-e39df811648b"),
                            Name = "momo",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("19afe27d-56c3-4685-90d3-9180e6f0f241"),
                            Name = "vnpay",
                            Status = true
                        });
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Tittle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TittleImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.ProductDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ColorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("PriceSale")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SKU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("ProductDetails");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.ProductImages", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Ranks", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PoinsMax")
                        .HasColumnType("int");

                    b.Property<int?>("PointsMin")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Ranks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2fa0118d-b530-421f-878e-ce4d54bfc6ab"),
                            Name = "Bạc",
                            PoinsMax = 1000000,
                            PointsMin = 0
                        },
                        new
                        {
                            Id = new Guid("ecdc3b10-0dc9-4be9-b208-7c310a60b64c"),
                            Name = "Vàng",
                            PoinsMax = 3000000,
                            PointsMin = 1000001
                        },
                        new
                        {
                            Id = new Guid("8796faaa-0617-4511-8779-9c34ad9b81c9"),
                            Name = "Kim Cương",
                            PoinsMax = 10000000,
                            PointsMin = 3000001
                        });
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Rate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("Reply")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId")
                        .IsUnique();

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Size", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fb26f8b6-3ded-4327-836b-9831a559d4e3"),
                            Name = "38"
                        },
                        new
                        {
                            Id = new Guid("bc00a134-a35e-4518-bfef-57790c895dc5"),
                            Name = "39"
                        },
                        new
                        {
                            Id = new Guid("83004364-4cd3-4472-9290-40f469e2f168"),
                            Name = "40"
                        },
                        new
                        {
                            Id = new Guid("e870b6fe-a326-4320-b097-d7a4845b7bff"),
                            Name = "41"
                        },
                        new
                        {
                            Id = new Guid("b36b6711-5b52-4852-9f1e-5f3d6c6ae3e8"),
                            Name = "42"
                        },
                        new
                        {
                            Id = new Guid("550e863c-9d6d-426d-a435-46dad4eba0d1"),
                            Name = "43"
                        },
                        new
                        {
                            Id = new Guid("cf30c96a-cc6b-4e23-8ac5-6152ee6ef7f7"),
                            Name = "44"
                        });
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<decimal?>("Coins")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("Points")
                        .HasColumnType("int");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("RankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RankId");

                    b.ToTable("Users", "security");

                    b.HasData(
                        new
                        {
                            Id = "2FA6148D-B530-421F-878E-CE4D54BFC6AB",
                            AccessFailedCount = 0,
                            Coins = 0m,
                            ConcurrencyStamp = "a5e60011-d9e0-4dbb-939a-bc0034bd6d4f",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedUserName = "GUEST",
                            PhoneNumberConfirmed = false,
                            Points = 0,
                            RankId = new Guid("2fa0118d-b530-421f-878e-ce4d54bfc6ab"),
                            SecurityStamp = "bc88b3c9-babe-4954-8d64-4556f71e54ea",
                            TwoFactorEnabled = false,
                            UserName = "Guest"
                        },
                        new
                        {
                            Id = "1FA6148D-B530-421F-878E-CE4D54BFC6AB",
                            AccessFailedCount = 0,
                            Coins = 0m,
                            ConcurrencyStamp = "804d453e-042b-47c1-b057-0ca61e4bdb3a",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEBU/ECKQGqvUa243/dkXqtMpJ0yhaEGc9ZnA0+MgtG0aWOrjfJhk6L0/xQc4fuAbtg==",
                            PhoneNumberConfirmed = false,
                            Points = 0,
                            RankId = new Guid("2fa0118d-b530-421f-878e-ce4d54bfc6ab"),
                            SecurityStamp = "03ac67cf-0115-430a-8519-6cfcece2759e",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.UserVoucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherId");

                    b.ToTable("UserVouchers");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Voucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MaximumOrderValue")
                        .HasColumnType("int");

                    b.Property<int?>("MinimumOrderValue")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VoucherCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VoucherType")
                        .HasColumnType("int");

                    b.Property<decimal?>("VoucherValue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", "security");

                    b.HasData(
                        new
                        {
                            Id = "2FA6148D-B530-421F-878E-CE1D54BFC6AB",
                            ConcurrencyStamp = "bd3c0e01-994f-425c-92a3-b38581b3c12f",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2FA6148D-B530-421F-878E-CE2D54BFC6AB",
                            ConcurrencyStamp = "bbb77f06-5b86-43be-ab9c-b7733d90bb32",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "2FA6148D-B530-421F-878E-CE4D54BFC6AB",
                            ConcurrencyStamp = "87844216-68f5-40ee-9632-3ac37230b7a6",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "security");

                    b.HasData(
                        new
                        {
                            UserId = "2FA6148D-B530-421F-878E-CE4D54BFC6AB",
                            RoleId = "2FA6148D-B530-421F-878E-CE4D54BFC6AB"
                        },
                        new
                        {
                            UserId = "1FA6148D-B530-421F-878E-CE4D54BFC6AB",
                            RoleId = "2FA6148D-B530-421F-878E-CE1D54BFC6AB"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "security");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Address", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.User", "Users")
                        .WithMany("Address")
                        .HasForeignKey("UserId");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Cart", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.User", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.CartItem", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId");

                    b.HasOne("FourLeafCloverShoe.Share.Models.ProductDetail", "ProductDetails")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductDetailId");

                    b.Navigation("Cart");

                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Order", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.User", "Users")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.HasOne("FourLeafCloverShoe.Share.Models.Voucher", "Vouchers")
                        .WithMany("Orders")
                        .HasForeignKey("VoucherId");

                    b.Navigation("Users");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.OrderItem", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.Order", "Orders")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId");

                    b.HasOne("FourLeafCloverShoe.Share.Models.ProductDetail", "ProductDetails")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductDetailId");

                    b.Navigation("Orders");

                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.PaymentDetail", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.Order", "Order")
                        .WithMany("PaymentDetails")
                        .HasForeignKey("IdOrder")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FourLeafCloverShoe.Share.Models.PaymentType", "PaymentType")
                        .WithMany("Orders")
                        .HasForeignKey("IdPayment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Post", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.User", "Users")
                        .WithMany("Posts")
                        .HasForeignKey("UserId");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Product", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.Brand", "Brands")
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.HasOne("FourLeafCloverShoe.Share.Models.Category", "Categories")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Brands");

                    b.Navigation("Categories");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.ProductDetail", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.Colors", "Colors")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FourLeafCloverShoe.Share.Models.Material", "Material")
                        .WithMany("ProductDetails")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FourLeafCloverShoe.Share.Models.Product", "Products")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FourLeafCloverShoe.Share.Models.Size", "Size")
                        .WithMany("ProductDetails")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Colors");

                    b.Navigation("Material");

                    b.Navigation("Products");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.ProductImages", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.Product", "Products")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Rate", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.OrderItem", "OrderItem")
                        .WithOne("Rate")
                        .HasForeignKey("FourLeafCloverShoe.Share.Models.Rate", "OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.User", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.Ranks", "Ranks")
                        .WithMany("Users")
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ranks");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.UserVoucher", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.User", "Users")
                        .WithMany("VoucherUsers")
                        .HasForeignKey("UserId");

                    b.HasOne("FourLeafCloverShoe.Share.Models.Voucher", "Vouchers")
                        .WithMany("UserVouchers")
                        .HasForeignKey("VoucherId");

                    b.Navigation("Users");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FourLeafCloverShoe.Share.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FourLeafCloverShoe.Share.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Colors", b =>
                {
                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Material", b =>
                {
                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("PaymentDetails");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.OrderItem", b =>
                {
                    b.Navigation("Rate");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.PaymentType", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Product", b =>
                {
                    b.Navigation("ProductDetails");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.ProductDetail", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Ranks", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Size", b =>
                {
                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.User", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Orders");

                    b.Navigation("Posts");

                    b.Navigation("VoucherUsers");
                });

            modelBuilder.Entity("FourLeafCloverShoe.Share.Models.Voucher", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("UserVouchers");
                });
#pragma warning restore 612, 618
        }
    }
}
